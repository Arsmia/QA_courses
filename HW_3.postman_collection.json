{
	"info": {
		"_postman_id": "cba32a8d-ca86-4034-83b0-6ab684fd7396",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_3.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"// let jsonData = pm.response.json();\r",
							"// let a = pm.request.url.query.all();\r",
							"// pm.test(\"request = response\",function () { \r",
							"//     pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"// });\r",
							"// pm.test(\"Body_is_correct\", function () {\r",
							"//     pm.response.to.have.body(\"This is the first responсe from server!\");\r",
							"// });\r",
							"\r",
							"pm.test(\"Body_matches_string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"// pm.test(\"Test_data_is_part_of_response\", function () {\r",
							"//     pm.expect(jsonData).to.be.a(\"string\");\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_3.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"// let ReqName = response.data.ReqName\r",
							"// console.log(ReqName)\r",
							"// pm.test(\"Parse_response\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.response).to.eql(ReqName);\r",
							"// // });\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"// // 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// // let u_name = request.data.name\r",
							"//     // var jsonData = pm.response.json();  \r",
							"pm.test(\"Name_is_valid\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Sviatlana\");\r",
							"});\r",
							"// // 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age_is_valid\", function () {\r",
							"//     // var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.age).to.eql(35);\r",
							"});\r",
							"// console.log(request.data.age)\r",
							"// // 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"// // let salary = parseInt(request.data.salary);\r",
							"pm.test(\"Salary_is_valid\", function () {\r",
							"//     // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(5000);\r",
							"});\r",
							"// // 7. Спарсить request.\r",
							"\r",
							"let req_name = request.data.name;\r",
							"let req_age = JSON.parse(request.data.age);\r",
							"let req_salary = JSON.parse(request.data.salary);\r",
							"\r",
							"console.log(req_name);\r",
							"console.log(req_age);\r",
							"console.log(req_salary);\r",
							"\r",
							"\r",
							"// // // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// // let user_name = jsonData.name\r",
							"pm.test(\"Check_name\", function () {\r",
							"//     // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"// // 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// // let age = parseInt(jsonData.age)\r",
							"pm.test(\"Check_age\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.age).to.eql(req_age);\r",
							"});\r",
							"// // 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// // let salary = parseInt(jsonData.age)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.salary).to.eql(req_salary)\r",
							"}\r",
							");\r",
							"console.log(jsonData.salary)\r",
							"// // 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"    pm.expect(+jsonData.u_salary_1_5_year).to.eql(request.salary*4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sviatlana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_3.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData) \r",
							"//\r",
							"//  4. Спарсить request.\r",
							"reqName = pm.request.url.query.toObject().name\r",
							"reqAge = pm.request.url.query.toObject().age\r",
							"reqSalary = + pm.request.url.query.toObject().salary\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age = +jsonData.age;\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(+jsonData.age).to.eql(request.data.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary = +jsonData.salary;\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(salary).to.eql(request.data.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_has_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property( \"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_has_age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name_is_Luky\", function () {\r",
							"        pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age == 4\", function () {\r",
							"    pm.expect(String(jsonData.family.pets.dog.age)).to.eql(\"4\");\r",
							"});\r",
							"console.log(jsonData.family.pets.dog.age);\r",
							"\r",
							"pm.test(\"Check_dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Sviatlana&age=35&salary=5000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sviatlana"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_3.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"// 4. Спарсить request.\r",
							"reqName = pm.request.url.query.toObject().name\r",
							"reqAge = pm.request.url.query.toObject().age\r",
							"reqSalary = + pm.request.url.query.toObject().salary\r",
							"console.log(reqName, reqAge, reqSalary)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_is_valid\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Sviatlana\");\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age_is_valid\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(35);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(request.data.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let salary = jsonData.salary[0];\r",
							"let salary_2 = +jsonData.salary[1];\r",
							"let salary_3 = +jsonData.salary[2];\r",
							"let salary_req = +request.data.salary_1;\r",
							"pm.test(\"[0] == salary\", function () {\r",
							"    pm.expect(request.data.salary).to.eql(salary[0]);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"[1] == salary\", function () {\r",
							"    pm.expect(request.data.salary).to.eql(salary[1]);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"[2] == salary\", function () {\r",
							"    pm.expect(request.data.salary).to.eql(salary[2]);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set(\"age\", jsonData.age)\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0])\r",
							"// 18. Передать в окружение времённую переменную name;\r",
							"// 19. Передать в окружение ремённую переменную age\r",
							"// 20. Передать в окружение ремённую переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"pm.test(\"21\", jsonData.salary.forEach(function(i) {\r",
							"    console.log(i)\r",
							"    })\r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Sviatlana&age=35&salary=5000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Sviatlana"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_3.5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр salary из окружения в age\r",
							"// 3. Вставить параметр salary из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"// 7. Спарсить request.\r",
							"let req_age = +JSON.parse(request.data.age);\r",
							"let req_name = request.data.name;\r",
							"let req_salary = +JSON.parse(request.data.salary);\r",
							"console.log (req_age, req_name, req_salary);\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response_has_salary_qa\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response_has_salary_after_6_month\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response_has_salary_after_12_moths\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response_has_person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary == salary\", function () {\r",
							"    pm.expect(+jsonData.start_qa_salary).to.eql(+request.data.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months == salary*2\", function () {\r",
							"    pm.expect(+jsonData.qa_salary_after_6_months).to.eql(+request.data.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months == salary*2.7\", function () {\r",
							"    pm.expect(+jsonData.qa_salary_after_12_months).to.eql(+request.data.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// pm.environment.set(\"salary_1_5_year\", jsonData[\"qa_salary_after_1.5_year\"]);\r",
							"// pm.test(\"qa_salary_after_1.5_year == salary*3.3 \", function() {\r",
							"//     pm.expect(environment.salary_1_5_year).to.eql(+request.data.salary*3.3)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// pm.environment.set(\"salary_3_5_years\", jsonData[\"qa_salary_after_3.5_years\"]);\r",
							"// pm.test(\"qa_salary_after_3.5_years == salary*3.8 \", function() {\r",
							"//     pm.expect(environment.salary_3_5_years).to.eql(+request.data.salary*3.8)\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"[1]  == salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+request.data.salary)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age == age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+request.data.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years == salary*4.2\", function () {\r",
							"    pm.expect(+jsonData.person.u_salary_5_years).to.eql(+request.data.salary*4.2)\r",
							"});\r",
							"// 22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"pm.test(\"22.\", function () {\r",
							" Object.keys(jsonData.person).forEach(function(i)  {\r",
							"  console.log(i, jsonData.person[i]);\r",
							"})});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}